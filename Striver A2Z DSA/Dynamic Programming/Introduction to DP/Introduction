
'Those who cannot remember the past are condemned to repeat it.' - DP

  
Dynamic Programming can be described as storing answers to various sub-problems to be used later whenever required to solve the main problem.

The two common dynamic programming approaches are:

Memoization: Known as the “top-down” dynamic programming, usually the problem is solved in the direction of the main problem to the base cases
Tabulation: Known as the “bottom-up" dynamic programming, usually the problem is solved in the direction of solving the base cases to the main problem

For example, if fibonacci series is considered, for each function call, we have to calculate the value 
for that call even of it has been repeated several times before.

To avoid repeatitive function calls, we can simply create an array called dp[] to store the values of the calls which have already been calculated.
Creating this array, we avoid repetitive function calls and optimize the time needed to compute the values.

eg. Normally, the fibonacci code is:

fib(n){
  if(n<=1) return n;
  return fib(n-1) + fib(n-2);
}

but, if we create an array of dp, which is initialized by -1 values in case where result is not precomputed, and when the result is computed,
we can replace the -1 values by the result, then the code can be simply modified as:

fib(n, int[] dp){
  if(n<=1) return n;

  //if dp array is created as well as initialized by -1
  if(dp[n] != -1) return dp[n];

  return dp[n] = fib(n-1, dp) + fib(n-2, dp);
}

DP is mainly used to avoid overlapping subproblems.

Time complexity: O(N)
  Since the overlapping subproblems will return the answer in constant O(1) time, the total number of function calls we make
  are O(N) only, hence the time complexity is O(N).
Space complexity: O(N)
  The call stack will take O(N) space and the DP array will take O(N) to store the precomputed values. 
  Hence ~O(N) space is required.

The above approach is called memoization. 
It still uses a recursive approach and starts to solve problem from top and moves to base case, hence can be called as a top-down approach.

To convert a memoization solution to a tabulation or bottom up approach, we start from the base case and find
answer to the actual question, moving to top.

Here, in this case, we can state the base condition as 
when n<=1 return n.
So, for 0, we return 0 and for 1 we return 1.
Thus, it can be concluded that, dp[0]=0 and dp[1] =1.
Since we have initial vales, that is bottom values, we find answers to the main question.

This can be stated using pseudocode as:

dp[n+1]             //initialization
dp[0] =0, dp[1]=1   //base case

//since we now have the base cases and the condition for recursion, which is
// fib(n-1) + fib(n-2)

for(int i=2; i<=n; i++){
  dp[i] = dp[i-1] + dp[i-2];
}

Time complexity: 
  The total time required for this tabulation approach is O(N).
Space Complexity:
  In this case, the approach is iterative and not recursive, thus the space required is
  only O(N) for the dp array.

We can further optimize the space required for the dp array as well.
Here, we can observe that we are using mainly three variables to calculate the values,
dp[i], dp[i-1] and dp[i-2].
If we label these three as curr, prev1, prev2 respectively,
the code can be restructured as :

//no need to initialize dp array
int prev2=0, prev1=1

for (int i=2; i<=n; i++){
  int curr= prev1+prev2;
  prev2= prev1;
  prev1= curr;
}

cout<< prev1;

This is the most optimized solution in terms of both time and space complexity. 
It uses a time complexity of O(N) for the for loop and constant space since no array is required to be created here.
  
This way, dp can be used to optimize recursive solutions.
  

How to identify a dp problem?

Generally, the problem statement is asked about these two:
1. Count the total number of ways.
2. Given multiple ways of doing a task, which way will give the minimum or the maximum output.

This is applicable in most of the questions, but not in all of the cases where dp is reqiured to solve the problem.

Solving the problem:
We can try to apply recursion. Once we get the recursive solution, we can go ahead to convert it to a dynamic programming one.

Steps To Solve The Problem After Identification

Once the problem has been identified, the following three steps comes handy in solving the problem:

1. Try to represent the problem in terms of indexes.
2. Try all possible choices/ways at every index according to the problem statement.
3. If the question states:
  Count all the ways - return sum of all choices/ways.
  Find maximum/minimum- return the choice/way with maximum/minimum output.

